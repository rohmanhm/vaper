{"version":3,"file":"vaper.js","sources":["../src/valueReplacer.js","../src/parseObject.js","../src/parseArray.js","../src/index.js"],"sourcesContent":["/**\n * Replace value\n * @param {Any} value data value\n * @param {Any} replaceFrom value that want to replaced\n * @param {Any} replaceWith value final after replaced\n */\nconst valueReplacer = (replaceFrom, replaceWith) => (value) => {\n  if (value === replaceFrom) return replaceWith;\n  return value;\n};\n\nexport default valueReplacer;\n","import isObject from 'lodash.isobject';\nimport isArray from 'lodash.isarray';\nimport parseArray from './parseArray';\nimport valueReplacer from './valueReplacer';\n\n/**\n * Recursively change object.\n * @param {Object} object data object value to convert.\n */\nconst parseObject = (replaceFrom, replaceWith) => (object) => {\n  /**\n   * Recursive function that change object deeply.\n   * @param {Object} child data object child value to convert.\n   */\n  const recursive = (child) => {\n    const newObject = {};\n\n    Object.keys(child).map((k) => {\n      const value = child[k];\n\n      if (isArray(value)) {\n        newObject[k] = parseArray(replaceFrom, replaceWith)(value);\n      } else if (isObject(value)) {\n        newObject[k] = recursive(value);\n      } else {\n        newObject[k] = valueReplacer(replaceFrom, replaceWith)(value);\n      }\n\n      return true;\n    });\n\n    return newObject;\n  };\n\n  return recursive(object);\n};\n\nexport default parseObject;\n","import isObject from 'lodash.isobject';\nimport isArray from 'lodash.isarray';\nimport parseObject from './parseObject';\nimport valueReplacer from './valueReplacer';\n\n/**\n * Parse array\n * @param {Any} replaceFrom value you want to replace\n * @param {Any} replaceWith final value after replaced\n */\nconst parseArray = (replaceFrom, replaceWith) => array => array.map((v) => {\n  if (isArray(v)) {\n    return parseArray(replaceFrom, replaceWith)(v);\n  } else if (isObject(v)) {\n    return parseObject(replaceFrom, replaceWith)(v);\n  }\n\n  return valueReplacer(replaceFrom, replaceWith)(v);\n});\n\nexport default parseArray;\n","import isObject from 'lodash.isobject';\nimport isArray from 'lodash.isarray';\nimport parseArray from './parseArray';\nimport parseObject from './parseObject';\nimport valueReplacer from './valueReplacer';\n\nexport default (replaceFrom, replaceWith) => (data) => {\n  if (isArray(data)) return parseArray(replaceFrom, replaceWith)(data);\n  if (isObject(data)) return parseObject(replaceFrom, replaceWith)(data);\n\n  return valueReplacer(replaceFrom, replaceWith)(data);\n};\n"],"names":["valueReplacer","replaceFrom","replaceWith","value","parseObject","object","recursive","child","newObject","keys","map","k","isArray","parseArray","isObject","array","v","data"],"mappings":"wVAMA,IAAMA,GAAgB,SAACC,EAAaC,SAAgB,UAACC,SAC/CA,KAAUF,EAAoBC,EAC3BC,ICCHC,EAAc,SAACH,EAAaC,SAAgB,UAACG,SAK/B,SAAZC,GAAaC,MACXC,oBAECC,KAAKF,GAAOG,IAAI,SAACC,MAChBR,GAAQI,EAAMI,SAEhBC,GAAQT,KACAQ,GAAKE,EAAWZ,EAAaC,GAAaC,GAC3CW,EAASX,KACRQ,GAAKL,EAAUH,KAEfQ,GAAKX,EAAcC,EAAaC,GAAaC,IAGlD,IAGFK,GAGQH,KCxBbQ,EAAa,QAAbA,GAAcZ,EAAaC,SAAgB,mBAASa,GAAML,IAAI,SAACM,SAC/DJ,GAAQI,GACHH,EAAWZ,EAAaC,GAAac,GACnCF,EAASE,GACXZ,EAAYH,EAAaC,GAAac,GAGxChB,EAAcC,EAAaC,GAAac,uBCXjCf,EAAaC,SAAgB,UAACe,SACxCL,GAAQK,GAAcJ,EAAWZ,EAAaC,GAAae,GAC3DH,EAASG,GAAcb,EAAYH,EAAaC,GAAae,GAE1DjB,EAAcC,EAAaC,GAAae"}